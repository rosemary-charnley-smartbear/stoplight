{
  "openapi": "3.0.0",
  "info": {
    "title": "Flower Shop -- Inventory",
    "description": "This is a sample Flower Shop server.  \nThis includes the Inventory REST APIs.\nYou can find\nout more about Swagger at\n[http://swagger.io](http://swagger.io) or on\n[irc.freenode.net, #swagger](http://swagger.io/irc/).\n",
    "termsOfService": "http://swagger.io/terms/",
    "contact": {
      "email": "rosemary.charnley@smartbear.com"
    },
    "license": {
      "name": "Apache 2.0",
      "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
    },
    "version": "1.0.0"
  },
  "servers": [
    {
      "url": "https://virtserver.swaggerhub.com/Charnley-Test/Inventory-Flower-Shop/1.0.0",
      "description": "SwaggerHub API Auto Mocking"
    },
    {
      "url": "https://virtserver.swaggerhub.com/Charnley-Test/User-Flower-Shop/1.0.0",
      "description": "SwaggerHub API Auto Mocking"
    },
    {
      "url": "https://development.flowershop.io/v1",
      "description": "Development Server"
    },
    {
      "url": "https://staging.flowershop.io/v1",
      "description": "Staging Server"
    },
    {
      "url": "https://api.flowershop.io/v1",
      "description": "Production Server"
    }
  ],
  "tags": [
    {
      "name": "inventory",
      "description": "Operations related to flower inventory"
    },
    {
      "name": "orders",
      "description": "Order management for the flower shop"
    }
  ],
  "paths": {
    "/inventory": {
      "get": {
        "tags": [
          "inventory"
        ],
        "summary": "Returns flower inventory by status",
        "description": "Retrieves a map of flower availability status and their respective quantities.",
        "operationId": "getInventory",
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "integer",
                    "format": "int32"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/orders": {
      "post": {
        "tags": [
          "orders"
        ],
        "summary": "Place an order for flowers",
        "operationId": "placeOrder",
        "requestBody": {
          "description": "Order placed for purchasing flowers",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Order"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                }
              }
            }
          },
          "400": {
            "description": "Invalid Order"
          }
        }
      }
    },
    "/orders/{orderId}": {
      "get": {
        "tags": [
          "orders"
        ],
        "summary": "Find purchase order by ID",
        "description": "Retrieve an order by its unique ID.",
        "operationId": "getOrderById",
        "parameters": [
          {
            "name": "orderId",
            "in": "path",
            "description": "ID of the order to be fetched",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                }
              }
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Order not found"
          }
        }
      },
      "delete": {
        "tags": [
          "orders"
        ],
        "summary": "Delete purchase order by ID",
        "operationId": "deleteOrder",
        "parameters": [
          {
            "name": "orderId",
            "in": "path",
            "description": "ID of the order to be deleted",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Order not found"
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "Order": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "flowerId": {
            "type": "integer",
            "format": "int64"
          },
          "quantity": {
            "type": "integer",
            "format": "int32"
          },
          "orderDate": {
            "type": "string",
            "format": "date-time"
          },
          "status": {
            "type": "string",
            "description": "Order Status",
            "enum": [
              "pending",
              "confirmed",
              "delivered"
            ]
          },
          "complete": {
            "type": "boolean",
            "default": false
          }
        }
      },
      "Flower": {
        "required": [
          "name",
          "price"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "name": {
            "type": "string",
            "example": "Rose"
          },
          "category": {
            "type": "string",
            "example": "Bouquet"
          },
          "price": {
            "type": "number",
            "format": "float"
          },
          "status": {
            "type": "string",
            "description": "Flower availability status",
            "enum": [
              "in_stock",
              "out_of_stock"
            ]
          }
        }
      }
    },
    "securitySchemes": {
      "api_key": {
        "type": "apiKey",
        "name": "api_key",
        "in": "header"
      }
    }
  }
}